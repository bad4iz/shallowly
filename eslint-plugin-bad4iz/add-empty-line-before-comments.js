/* copied from upstream */

/**
 * ESLint –ø—Ä–∞–≤–∏–ª–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—É—Å—Ç–æ–π —Å—Ç—Ä–æ–∫–∏ –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏, —Å–æ–¥–µ—Ä–∂–∞—â–∏–º–∏ –æ–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞.
 */
module.exports = {
  create(context) {
    const keywords = ['clear mock', 'act', 'assert'];
    return {
      Program() {
        const sourceCode = context.getSourceCode();
        const lines = sourceCode.getLines();
        lines.forEach((line, lineIndex) => {
          if (line.trim().startsWith('//')) {
            const commentText = line.toLowerCase();
            const containsKeyword = keywords.find((keyword) =>
              commentText.includes(keyword),
            );
            if (containsKeyword) {
              const previousLine = lines[lineIndex - 1];
              if (previousLine && previousLine.trim() !== '') {
                context.report({
                  loc: {
                    start: { line: lineIndex + 1, column: 0 },
                    end: { line: lineIndex + 1, column: line.length },
                  },
                  message: `ü§¨ –ü–µ—Ä–µ–¥ ${containsKeyword} –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞`,
                  fix(fixer) {
                    return fixer.insertTextBeforeRange([
                      sourceCode.getIndexFromLoc({ line: lineIndex + 1, column: 0 }),
                      0,
                    ], '\n');
                  },
                });
              }
            }
          }
        });
      },
    };
  },
  meta: {
    type: 'layout',
    fixable: 'whitespace',
    docs: {
      description: '–î–æ–±–∞–≤–ª—è–µ—Ç –ø—É—Å—Ç—É—é —Å—Ç—Ä–æ–∫—É –ø–µ—Ä–µ–¥ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è–º–∏ —Å –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏',
      category: 'Stylistic Issues',
      recommended: false,
    },
    schema: [],
  },
};
